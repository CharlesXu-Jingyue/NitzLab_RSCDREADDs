%% Wrapper for tripleT data

% data_dir = 'C:\Users\Aurif\Documents\Work\AJ_SP_RSCINACTIVATION\AllData';
% current_dir = cd(data_dir);
file_info = dir('*_Events*');
file_list = char({file_info.name});
RecNum = str2num(file_list(:,4:5));
RatNum = (file_list(:,7:9));
RecCondition = (file_list(:,11:13));
NumPaths = str2num(file_list(:,15));
RotationCondition = (file_list(:,17:19));




for filenum = 1:size(file_list,1)                                          %For every rmaps file
    load(file_list(filenum,:))                                             %load it
	ID.Rat{filenum} = RatNum(filenum,:);
	ID.Rec(filenum) = RecNum(filenum,:);   
	ID.Condition{filenum} = RecCondition(filenum,:); 
	ID.NumPaths(filenum) = NumPaths(filenum);
	ID.Rotation{filenum} = RotationCondition(filenum,:);

	[Behavior.Runtimes{filenum}, ...
	Behavior.Timestamps{filenum},...
    Behavior.Velocity{filenum},...
    Behavior.HD{filenum},...
    Behavior.All{filenum},...
    Behavior.Runs{filenum},...
    Behavior.Blocks{filenum},...
    Performance.ErrorBlocks{filenum},...
    Performance.RewardBlocks{filenum},...
    Performance.ErrorRoute{filenum},...
    Performance.MeanErrors(filenum),...
    Performance.PerfectPercent(filenum),...
    BehaviorSeq.Runticker_All{filenum},...
    BehaviorSeq.Runticker_Internals{filenum},...
    BehaviorSeq.Route1Prob{filenum},...
    BehaviorSeq.TransMatrix1{filenum},...
    BehaviorSeq.TransMatrix2{filenum},...
    BehaviorSeq.TransMatrixAll1{filenum},...
    BehaviorSeq.TransMatrixAll2{filenum},...
    TurnAnalysis.IsRightTurn_IntOnly{filenum},...
    TurnAnalysis.PAlt_Turn1(filenum),...
    TurnAnalysis.PAlt_Turn2Any(filenum),...
    TurnAnalysis.PAlt_Turn3Any(filenum),...
    TurnAnalysis.PAlt_Turn2Specific(filenum),...
    TurnAnalysis.PAlt_Turn3Specific(filenum),...
    TurnAnalysis.TotalRTurns(filenum),...
    TurnAnalysis.TotalLTurns(filenum),...
    Returns.PShortReturn(filenum),...
    Returns.PLongReturn(filenum),...
    Returns.PReturnSameSideNext(filenum),...
    Returns.PReturnOppSideNext(filenum),...
    Performance.PerfectBlocks{filenum},...
    Performance.PerfectBlockPermuationCounter{filenum}] = MakeBehavioralStats_wrapped(NumPaths(filenum),indRecStruct);
    
    filenum;
end

%% Compile variables into cell array

CompiledData = cell(filenum,28);

for i = 1:filenum
    CompiledData{i,1} = num2cell(RecNum(i,1));
    CompiledData{i,2} = convertCharsToStrings(RecCondition(i,:));
    CompiledData{i,3} = convertCharsToStrings(RotationCondition(i,:));
    CompiledData{i,4} = Behavior.Runs{1,i};
    CompiledData{i,5} = Behavior.Blocks{1,i};
    CompiledData{i,6} = Performance.ErrorBlocks{1,i};
    CompiledData{i,7} = Performance.RewardBlocks{1,i};
    CompiledData{i,8} = Performance.ErrorRoute{1,i};
    CompiledData{i,9} = num2cell(Performance.MeanErrors(1,i));
    CompiledData{i,10} = num2cell(Performance.PerfectPercent(1,i));
    CompiledData{i,11} = Performance.PerfectBlocks{1,i};
    CompiledData{i,12} = Performance.PerfectBlockPermuationCounter{1,i};
    CompiledData{i,13} = BehaviorSeq.TransMatrix1{1,i};
    CompiledData{i,14} = BehaviorSeq.TransMatrix2{1,i};
    CompiledData{i,15} = BehaviorSeq.TransMatrixAll1{1,i};
    CompiledData{i,16} = BehaviorSeq.TransMatrixAll2{1,i};
    CompiledData{i,17} = TurnAnalysis.IsRightTurn_IntOnly{1,i};
    CompiledData{i,18} = num2cell(TurnAnalysis.PAlt_Turn1(1,i));
    CompiledData{i,19} = num2cell(TurnAnalysis.PAlt_Turn2Any(1,i));
    CompiledData{i,20} = num2cell(TurnAnalysis.PAlt_Turn3Any(1,i));
    CompiledData{i,21} = num2cell(TurnAnalysis.PAlt_Turn2Specific(1,i));
    CompiledData{i,22} = num2cell(TurnAnalysis.PAlt_Turn3Specific(1,i));
    CompiledData{i,23} = num2cell(TurnAnalysis.TotalRTurns(1,i));
    CompiledData{i,24} = num2cell(TurnAnalysis.TotalLTurns(1,i));
    CompiledData{i,25} = num2cell(Returns.PShortReturn(1,i));
    CompiledData{i,26} = num2cell(Returns.PLongReturn(1,i));
    CompiledData{i,27} = num2cell(Returns.PReturnSameSideNext(1,i));
    CompiledData{i,28} = num2cell(Returns.PReturnOppSideNext(1,i));
end

CompiledDataTable = cell2table(CompiledData, 'VariableNames', {'RecNum','Cond',...
    'Rot','Runs','Blocks','ErrorBlocks','RewardBlocks','ErrorRoute',...
    'MeanErrors','PerfectPercent','PerfectBlocks','PerfBlockPerm',...
    'TransMat1','TransMat2','});


